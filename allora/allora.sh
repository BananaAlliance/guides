#!/bin/bash

echo "-----------------------------------------------------------------------------"
curl -s https://raw.githubusercontent.com/BananaAlliance/tools/main/logo.sh | bash
echo "-----------------------------------------------------------------------------"


function print_step() {
  echo -e "\033[1;34m==================================================\033[0m"
  echo -e "\033[1;33m$1\033[0m"
  echo -e "\033[1;34m==================================================\033[0m"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏–Ω–Ω–µ—Ä–∞
function spinner() {
  local pid=$1
  local delay=0.1
  local spinstr='|/-\\'
  echo -n " "
  while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
    local temp=${spinstr#?}
    printf " [%c]  " "$spinstr"
    local spinstr=$temp${spinstr%"$temp"}
    sleep $delay
    printf "\b\b\b\b\b\b"
  done
  printf "    \b\b\b\b"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞
function print_banner() {
  echo "üåüüåüüåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ Allora Node üåüüåüüåü"
  sleep 1
  echo "–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã."
  echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—ã—Ç–∞."
  echo ""
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
function handle_error() {
  local step=$1
  echo "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ: '$step'"
  echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ê–ª—å—è–Ω—Å–∞ –Ω–æ–¥ –¥–ª—è –ø–æ–º–æ—â–∏."
  exit 1
}

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–∫—Ä—É–∂–µ–Ω–∏—è
function load_environment() {
  source .profile || handle_error "–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–∫—Ä—É–∂–µ–Ω–∏—è"
  print_step
  echo "üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ."
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –∏ Go
function install_essential_packages_and_go() {
    echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–∫–µ—Ç–æ–≤..."
    sleep 2
    sudo apt update || handle_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤"

    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤..."
    sleep 2
    sudo apt install mc jq curl build-essential git wget git lz4 -y || handle_error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–∞–∫–µ—Ç–æ–≤"

    echo "üóë –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ Go (–µ—Å–ª–∏ –æ–Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞)..."
    sleep 2
    sudo rm -rf /usr/local/go

    echo "üì• –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Go 1.22.4..."
    sleep 2
    curl https://dl.google.com/go/go1.22.4.linux-amd64.tar.gz | sudo tar -C /usr/local -zxvf - || handle_error "–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Go"

    echo "‚öôÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Go..."
    {
        echo "export GOROOT=/usr/local/go"
        echo "export GOPATH=$HOME/go"
        echo "export GO111MODULE=on"
        echo "export PATH=$PATH:/usr/local/go/bin:$HOME/go/bin"
    } >> $HOME/.profile || handle_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å .profile —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ Go"

    echo "üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤ .profile..."
    sleep 2
    source $HOME/.profile || handle_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ .profile"

    echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ GO –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."
    sleep 2
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker, –µ—Å–ª–∏ –æ–Ω –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
function install_docker() {
  if ! command -v docker &> /dev/null; then
    echo "üê≥ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ Docker. –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É..."
    sudo install -m 0755 -d /etc/apt/keyrings
    for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done
    sudo apt-get update
    sudo apt-get install ca-certificates curl
    sudo install -m 0755 -d /etc/apt/keyrings
    sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
    sudo chmod a+r /etc/apt/keyrings/docker.asc

    echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

    sudo apt-get update
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin screen
    echo "üê≥ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."
    sleep 2
  else
    echo "üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
    sleep 2
  fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Go, –µ—Å–ª–∏ –≤–µ—Ä—Å–∏—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
function install_go() {
  local required_major_version=1
  local required_minor_version=22

  if command -v go &> /dev/null; then
    local go_version=$(go version | awk '{print $3}' | cut -d 'o' -f 2)
    local major_version=$(echo "$go_version" | cut -d '.' -f 1)
    local minor_version=$(echo "$go_version" | cut -d '.' -f 2)

    if [[ "$major_version" -lt "$required_major_version" ]] || { [[ "$major_version" -eq "$required_major_version" ]] && [[ "$minor_version" -lt "$required_minor_version" ]]; }; then
      echo "üîß –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Go –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏."
      install_essential_packages_and_go
      echo "üîß Go —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω."
      sleep 2
    else
      echo "üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –¢—Ä–µ–±—É–µ–º–∞—è –≤–µ—Ä—Å–∏—è Go —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞."
      sleep 2
    fi
  else
    echo "üîß Go –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É..."
    sleep 2
    install_essential_packages_and_go
    echo "üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Go –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."
    sleep 2
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
function clone_or_update_repo() {
  local repo_path="$HOME/allora-chain"
  local repo_url="https://github.com/allora-network/allora-chain.git"

  echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –ø–æ –ø—É—Ç–∏: $repo_path"
  if [ -d "$repo_path" ]; then
    echo "üìÅ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è..."
    cd "$repo_path" && git pull || handle_error "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    echo "üîÑ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω."
    sleep 2
  else
    git clone "$repo_url" "$repo_path" && cd "$repo_path" || handle_error "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
    echo "üéâ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω."
    sleep 2
  fi
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–¥—ã
function install_node() {
  print_step
  echo "üöÄ –ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–¥—ã Allora..."
  install_docker
  install_go

  clone_or_update_repo && cd $HOME/allora-chain
  sed -i 's/^go 1.22.2$/go 1.22/' go.mod || handle_error "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ go.mod"
  make all || handle_error "–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ Allora"
  print_step
  echo "üë∑ –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ Allora –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."
  sleep 2

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –Ω–æ–¥—ã
  print_step

  if allorad version; then
    echo "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–æ–¥—ã: $(allorad version)"
    echo "üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ seed —Ñ—Ä–∞–∑—É –∫–æ—à–µ–ª—å–∫–∞:"
    allorad keys add testkey --recover
    #echo "üîë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ—à–µ–ª—å–∫–∞:"
    #echo "    source .profile && allorad keys add testkey"
    #echo "üìù –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —Å–∏–¥-—Ñ—Ä–∞–∑—É, –∞–¥—Ä–µ—Å –∏ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è."
  else
    handle_error "–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ –Ω–æ–¥—ã"
  fi
}

# –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã
function remove_node() {
  echo "üóë –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–æ–¥—ã Allora..."
  rm -rf $HOME/allora-chain || handle_error "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã"
  echo "üßπ –ù–æ–¥–∞ Allora —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞."
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–∏—Ö —É–∑–ª–æ–≤ (–≤–æ—Ä–∫–µ—Ä–æ–≤)
function setup_workers() {
  print_step
  echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–±–æ—á–∏—Ö —É–∑–ª–æ–≤ –¥–ª—è Allora..."
  echo "üîë –í–≤–µ–¥–∏—Ç–µ —Å–∏–¥-—Ñ—Ä–∞–∑—É –¥–ª—è –∫–æ—à–µ–ª—å–∫–æ–≤ –≤–æ—Ä–∫–µ—Ä–æ–≤:"
  read seed_phrase

  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–≤–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
  setup_worker "worker1-10m" "worker1-10m" "$seed_phrase"

  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
  setup_worker "worker2-24h" "worker2-24h" "$seed_phrase"

  # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞
  setup_worker "worker3-20m" "worker3-20m" "$seed_phrase"

  echo "üöÄ –í—Å–µ —Ä–∞–±–æ—á–∏–µ —É–∑–ª—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –∏ –∑–∞–ø—É—â–µ–Ω—ã."
}

function setup_worker() {
  local repo_url="https://github.com/nhunamit/basic-coin-prediction-node.git"
  local repo_dir="basic-coin-prediction-node"
  local worker_dir=$1
  local branch_name=$2
  local seed_phrase=$3

  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è basic-coin-prediction-node
  if [ -d "$HOME/$repo_dir" ]; then
    echo "‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $repo_dir —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –£–¥–∞–ª–∏—Ç—å –µ—ë? (y/n):"
    read -r delete_repo_dir
    if [ "$delete_repo_dir" == "y" ]; then
      rm -rf "$HOME/$repo_dir" || handle_error "–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ $repo_dir"
    else
      echo "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –¥–ª—è $repo_dir. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤—Ä—É—á–Ω—É—é –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
      return 1
    fi
  fi

  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è
  if [ -d "$HOME/$worker_dir" ]; then
    echo "‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $worker_dir —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –£–¥–∞–ª–∏—Ç—å –µ—ë? (y/n):"
    read -r delete_dir
    if [ "$delete_dir" == "y" ]; then
      rm -rf "$HOME/$worker_dir" || handle_error "–£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ $worker_dir"
    else
      echo "‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –¥–ª—è $worker_dir. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–¥–∞–ª–∏—Ç–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤—Ä—É—á–Ω—É—é –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
      return 1
    fi
  fi

  cd $HOME && git clone $repo_url || handle_error "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –≤–æ—Ä–∫–µ—Ä–∞"

  mv $repo_dir $worker_dir || handle_error "–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"

  cd $worker_dir || handle_error "–ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é $worker_dir"

  git branch -a || handle_error "–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–µ—Ç–æ–∫"

  git checkout $branch_name || handle_error "–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤–µ—Ç–∫—É $branch_name"

  git branch -a || handle_error "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–π –≤–µ—Ç–∫–∏"

  # –ó–∞–º–µ–Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–π –≤ config.json
  sed -i "s/\"addressKeyName\": \".*\"/\"addressKeyName\": \"testkey\"/" config.json || handle_error "–ó–∞–º–µ–Ω–∞ –∫–ª—é—á–∞ addressKeyName –≤ –∫–æ–Ω—Ñ–∏–≥–µ"
  sed -i "s/\"addressRestoreMnemonic\": \".*\"/\"addressRestoreMnemonic\": \"$seed_phrase\"/" config.json || handle_error "–ó–∞–º–µ–Ω–∞ —Å–∏–¥-—Ñ—Ä–∞–∑—ã –≤ –∫–æ–Ω—Ñ–∏–≥–µ"

  chmod +x init.config 
  ./init.config

  docker compose up -d || handle_error "–ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞.."

  cd $HOME
}


# –í—ã–≤–æ–¥ –ª–æ–≥–æ–≤
function show_logs() {
  echo "üìú –ß—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ—Ä–∫–µ—Ä–∞:"
  echo "1. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ allora-worker-1: docker logs -f allora-worker-1"
  echo "2. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ allora-worker-2: docker logs -f allora-worker-2"
  echo "3. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ allora-worker-3: docker logs -f allora-worker-3"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–¥—ã
function check_node_status() {
  echo "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–¥—ã Allora..."
  curl --location 'http://localhost:6000/api/v1/functions/execute' \
    --header 'Content-Type: application/json' \
    --data '{
      "function_id": "bafybeigpiwl3o73zvvl6dxdqu7zqcub5mhg65jiky2xqb4rdhfmikswzqm",
      "method": "allora-inference-function.wasm",
      "parameters": null,
      "topic": "1",
      "config": {
        "env_vars": [
          {
            "name": "BLS_REQUEST_PATH",
            "value": "/api"
          },
          {
            "name": "ALLORA_ARG_PARAMS",
            "value": "ETH"∆í
          }
        ],
        "number_of_nodes": -1,
        "timeout": 10
      }
    }' || handle_error "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –Ω–æ–¥—ã"
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
function main() {
  print_banner
  local action="$1"

  case "$action" in
    "install")
      install_node
      ;;
    "status")
      check_node_status
      ;;
    "remove")
      remove_node
      ;;
    "setup_workers")
      setup_workers
      ;;
    "show-logs")
      show_logs
      ;;
    *)
      echo "‚ö†Ô∏è –£–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: $action. –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏: 'install', 'remove', 'setup_workers', 'show-logs'"
      exit 2
      ;;
  esac
}

# –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
main "$@"