#!/bin/bash

GREEN='\033[0;32m'
BRIGHT_GREEN='\033[1;32m'
NC='\033[0m'  # No Color

echo -e "${BRIGHT_GREEN}-----------------------------------------------------------------------------${NC}"
curl -s https://raw.githubusercontent.com/BananaAlliance/tools/main/logo.sh | bash
echo -e "${BRIGHT_GREEN}-----------------------------------------------------------------------------${NC}"

function print_step() {
  echo -e "${BRIGHT_GREEN}==================================================${NC}"
  echo -e "${GREEN}$1${NC}"
  echo -e "${BRIGHT_GREEN}==================================================${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–ø–∏–Ω–Ω–µ—Ä–∞
function spinner() {
  local pid=$1
  local delay=0.1
  local spinstr='|/-\\'
  echo -n " "
  while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
    local temp=${spinstr#?}
    printf "${GREEN} [%c]  ${NC}" "$spinstr"
    local spinstr=$temp${spinstr%"$temp"}
    sleep $delay
    printf "\b\b\b\b\b\b"
  done
  printf "    \b\b\b\b"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞
function print_banner() {
  echo -e "${GREEN}üåüüåüüåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫ Infernet Node üåüüåüüåü${NC}"
  sleep 1
  echo -e "${GREEN}–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã.${NC}"
  echo -e "${GREEN}–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ–ø—ã—Ç–∞.${NC}"
  echo ""
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
function handle_error() {
  local step=$1
  echo -e "${BRIGHT_GREEN}‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ: '$step'${NC}"
  echo -e "${BRIGHT_GREEN}–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –ø–æ–º–æ—â–∏.${NC}"
  exit 1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Forge
install_forge() {
  print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Forge"
  curl -L https://foundry.paradigm.xyz | bash
  source /root/.bashrc
  foundryup
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker
install_docker() {
  print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker"
  if ! command -v docker &> /dev/null; then
    echo -e "${GREEN}üê≥ Docker –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É...${NC}"
    sudo apt update && sudo apt upgrade -y
    sudo apt -qy install curl git jq lz4 build-essential screen
    sudo apt install apt-transport-https ca-certificates curl software-properties-common build-essential -qy
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
    sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
    sudo apt install docker-ce -qy
    echo -e "${GREEN}üê≥ Docker —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${NC}"
  else
    echo -e "${GREEN}üê≥ Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.${NC}"
  fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
setup_repository() {
  print_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
  if ! command -v jq &> /dev/null; then
    echo -e "${GREEN}jq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å jq...${NC}"
    sudo apt-get update && sudo apt-get install -y jq || handle_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ jq"
  fi

  cd $HOME
  rm -rf infernet-container-starter
  git clone --recurse-submodules https://github.com/ritual-net/infernet-container-starter || handle_error "–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"

  docker_compose_file="/root/infernet-container-starter/deploy/docker-compose.yaml"

   # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –≤ docker-compose.yaml
  sed -i 's/8545:3000/8545:3051/' "$docker_compose_file"
  sed -i 's/--port 3000/--port 3051/' "$docker_compose_file"
  sed -i 's/3000:3000/3051:3051/' "$docker_compose_file"
  sed -i 's/--bind=0.0.0.0:3000/--bind=0.0.0.0:3051/' "$docker_compose_file"


  cd infernet-container-starter

  screen -ls | grep "ritual" | cut -d. -f1 | awk '{print $1}' | xargs -I {} screen -S {} -X quit
  screen -dmS ritual
  screen -S ritual -p 0 -X stuff "project=hello-world make deploy-container\n"
  sleep 15
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
update_config_files() {
  print_step "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
  echo -e "${GREEN}–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á:${NC}"
  read private_key
  sleep 10
  [[ "$private_key" != "0x"* ]] && private_key="0x$private_key"

  config_file="/root/infernet-container-starter/deploy/config.json"
  docker_compose_file="/root/infernet-container-starter/deploy/docker-compose.yaml"

   # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—Ç–æ–≤ –≤ docker-compose.yaml
  sed -i 's/8545:3000/8545:3051/' "$docker_compose_file"
  sed -i 's/--port 3000/--port 3051/' "$docker_compose_file"
  sed -i 's/3000:3000/3051:3051/' "$docker_compose_file"
  sed -i 's/--bind=0.0.0.0:3000/--bind=0.0.0.0:3051/' "$docker_compose_file"

 


  if [ $? -eq 0 ]; then
    echo -e "${GREEN}–ü–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 3051 –≤ —Ñ–∞–π–ª–µ docker-compose.yaml.${NC}"
  else
    echo -e "${GREEN}–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ—Ä—Ç–∞.${NC}"
  fi

  sed -i "s|\"registry_address\":.*|\"registry_address\": \"0x3B1554f346DFe5c482Bb4BA31b880c1C18412170\",|" "$config_file"
  sed -i "s|\"rpc_url\":.*|\"rpc_url\": \"https://base-rpc.publicnode.com\",|" "$config_file"
  sed -i "s|\"private_key\":.*|\"private_key\": \"$private_key\"|" "$config_file"
  sed -i 's/"port": "3000"/"port": "3051"/' "$config_file"
  sed -i 's/--bind=0.0.0.0:3000/--bind=0.0.0.0:3051/' "$config_file"

   # –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—è "snapshot_sync"
  snapshot_sync_value='{"snapshot_sync": {"sleep": 5, "batch_size": 50}}'

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—è "snapshot_sync" —Å –ø–æ–º–æ—â—å—é sed
  sed -i '/"snapshot_sync": {/c\'"$snapshot_sync_value" "$config_file"

  new_rpc_url="https://base-rpc.publicnode.com"
  sed -i "/^# anvil's third default address$/,/^# deploying the contract$/s|sender := .*|sender := $private_key|" ~/infernet-container-starter/projects/hello-world/contracts/Makefile
  sed -i "/^# anvil's third default address$/,/^# deploying the contract$/s|RPC_URL := .*|RPC_URL := $new_rpc_url|" ~/infernet-container-starter/projects/hello-world/contracts/Makefile
  sed -i "s|address registry.*|address registry = 0x3B1554f346DFe5c482Bb4BA31b880c1C18412170;|" ~/infernet-container-starter/projects/hello-world/contracts/script/Deploy.s.sol
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—Ç–∞ –≤ —Ñ–∞–π–ª–µ config.json
update_port() {
  print_step "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –≤ —Ñ–∞–π–ª–µ config.json"
  local config_file="/root/infernet-container-starter/deploy/config.json"
  if ! command -v jq &> /dev/null; then
    echo -e "${GREEN}jq –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å jq...${NC}"
    sudo apt-get update && sudo apt-get install -y jq || handle_error "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ jq"
  fi

  echo -e "${GREEN}–ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ.${NC}"
  local temp_file=$(mktemp)
  jq '.containers[] | select(.id == "hello-world") | .port = "3051" | .command = "--bind=0.0.0.0:3051 --workers=2"' "$config_file" > "$temp_file" && mv "$temp_file" "$config_file"
  if [ $? -eq 0 ]; then
    echo -e "${GREEN}–ü–æ—Ä—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ 3051.${NC}"
  else
    echo -e "${GREEN}–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ—Ä—Ç–∞.${NC}"
    return 1
  fi
  restart_docker_services
  echo -e "${GREEN}–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
deploy_and_update_config() {
  print_step "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
  cd ~/infernet-container-starter
  output=$(make deploy-contracts project=hello-world 2>&1)
  echo "$output"
  contract_address=$(echo "$output" | grep -oP 'Deployed SaysHello:  \K[0-9a-fA-Fx]+')
  if [ -z "$contract_address" ]; then
    echo -e "${GREEN}–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.${NC}"
    return 1
  else
    echo -e "${GREEN}–ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞: $contract_address${NC}"
  fi

  config_file="$HOME/infernet-container-starter/deploy/config.json"
  jq --arg addr "$contract_address" '.containers[0].allowed_addresses = [$addr]' "$config_file" > temp.json && mv temp.json "$config_file"
  solidity_file="$HOME/infernet-container-starter/projects/hello-world/contracts/script/CallContract.s.sol"
    sed -i "s|SaysGM(.*);|SaysGM($contract_address);|" "$solidity_file"
    restart_docker_services
    echo -e "${GREEN}Solidity —Ñ–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω —Å –Ω–æ–≤—ã–º –∞–¥—Ä–µ—Å–æ–º –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞.${NC}"
    make call-contract project=hello-world
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
setup_service() {
    print_step "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–∏—Å–∞"
    local script_url="https://github.com/BananaAlliance/guides/raw/main/ritual/monitor_logs.sh"
    local script_path="/usr/local/bin/monitor_logs.sh"
    local service_path="/etc/systemd/system/monitor_logs.service"
    echo -e "${GREEN}–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–∞ —Å GitHub...${NC}"
    curl -sL $script_url -o $script_path
    chmod +x $script_path
    echo -e "${GREEN}–°–æ–∑–¥–∞–Ω–∏–µ systemd —Å–µ—Ä–≤–∏—Å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...${NC}"
    cat <<EOF > $service_path
[Unit]
Description=Monitor Logs and Manage Docker Containers
After=network.target

[Service]
Type=simple
User=root
ExecStart=$script_path
Restart=on-failure
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF
    echo -e "${GREEN}–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ–Ω–∞ systemd...${NC}"
    systemctl daemon-reload
    echo -e "${GREEN}–í–∫–ª—é—á–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞...${NC}"
    systemctl enable monitor_logs
    systemctl start monitor_logs
    echo -e "${GREEN}–°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω.${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤
restart_docker_services() {
    print_step "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤–∏—Å–æ–≤"
    sleep 20
    docker restart infernet-anvil
    docker restart infernet-node
    docker restart hello-world
    docker restart deploy-node-1
    docker restart deploy-fluentbit-1
    docker restart deploy-redis-1
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–¥—ã
update_node() {
    print_step "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–æ–¥—ã"
    cd ~/infernet-container-starter/deploy || handle_error "–ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é"
    sed -i '5s/.*/    image: ritualnetwork\/infernet-node:1.0.0/' docker-compose.yaml
    docker compose down
    docker compose up
    echo -e "${GREEN}–ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.${NC}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–¥—ã
uninstall_node() {
    print_step "–£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã"
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –Ω–æ–¥—É Ritual? (y/n): " confirm
    if [[ $confirm != [yY] ]]; then
        echo -e "${GREEN}–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.${NC}"
        return 0
    fi

    screen -ls | grep "ritual" | cut -d. -f1 | awk '{print $1}' | xargs -I {} screen -S {} -X quit
    rm -rf "$HOME/infernet-container-starter"
    sudo systemctl stop monitor_logs.service
    sudo systemctl disable monitor_logs.service
    sudo rm /etc/systemd/system/monitor_logs.service
    sudo systemctl daemon-reload
    sudo systemctl reset-failed

    docker kill infernet-anvil
    docker kill infernet-node
    docker kill hello-world
    docker kill deploy-node-1
    docker kill deploy-fluentbit-1
    docker kill deploy-redis-1

    echo -e "${GREEN}–ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.${NC}"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–¥—ã
install_node() {
    print_banner
    install_docker
    setup_repository
    update_config_files
    deploy_and_update_config
    setup_service
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
case "$1" in
  install)
    install_node
    ;;
  update_port)
    update_port
    ;;
  update)
    update_node
    ;;
  uninstall_node)
    uninstall_node
    ;;
  *)
    echo -e "${BRIGHT_GREEN}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 {install | uninstall_node | update | update_port}${NC}"
    exit 1
    ;;
esac