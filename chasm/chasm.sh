#!/bin/bash

install_dependencies() {
    echo -e "\e[34müîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏...\e[0m"
    sudo apt-get update && sudo apt-get upgrade -y
    sudo apt-get install -y ca-certificates curl ufw
    if ! command -v ufw &> /dev/null; then
        echo -e "\e[31m‚ùå –í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π 'ufw'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ 'ufw' –≤—Ä—É—á–Ω—É—é –∏ —Å–Ω–æ–≤–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç.\e[0m"
        echo -e "\e[32m–î–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ 'ufw', –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:\e[0m"
        echo -e "\e[32msudo apt-get install ufw\e[0m"
        exit 1
    fi
}

install_docker() {
    echo -e "\e[34müê≥ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker...\e[0m"
    sudo install -m 0755 -d /etc/apt/keyrings
    for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done
    sudo apt-get update
    sudo apt-get install ca-certificates curl
    sudo install -m 0755 -d /etc/apt/keyrings
    sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
    sudo chmod a+r /etc/apt/keyrings/docker.asc

    echo \
  "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
  $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable" | \
  sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

    sudo apt-get update
    sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin screen
}

install_ngrok() {
    echo -e "\e[34müåê –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ngrok...\e[0m"
    if ! command -v ngrok &> /dev/null; then
        curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
        echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
        sudo apt update
        sudo apt install -y ngrok
    fi
}

configure_ngrok() {
    echo -e "\e[34müîë –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º ngrok...\e[0m"
    echo -e "\e[33m–í–≤–µ–¥–∏—Ç–µ Authtoken –¥–ª—è ngrok: \e[0m"
    read -p $'\e[33mAuthtoken: \e[0m' NGROK_AUTHTOKEN
    ngrok config add-authtoken $NGROK_AUTHTOKEN

    screen -ls | grep "ngrok_session" | cut -d. -f1 | awk '{print $1}' | xargs -I {} screen -S {} -X quit
    screen -dmS ngrok_session
    screen -S ngrok_session -p 0 -X stuff "ngrok http 3032\n"
}

prompt_user_input() {
    echo -e "\e[34müìù –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...\e[0m"
    echo -e "\e[33m–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:\e[0m"
    read -p $'\e[33m–í–≤–µ–¥–∏—Ç–µ SCOUT_NAME (–Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –Ω–æ–¥—ã, –ª—é–±—ã–µ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã): \e[0m' SCOUT_NAME
    read -p $'\e[33m–í–≤–µ–¥–∏—Ç–µ SCOUT_UID: \e[0m' SCOUT_UID
    read -p $'\e[33m–í–≤–µ–¥–∏—Ç–µ WEBHOOK_API_KEY: \e[0m' WEBHOOK_API_KEY
    read -p $'\e[33m–í–≤–µ–¥–∏—Ç–µ GROQ_API_KEY: \e[0m' GROQ_API_KEY
}


get_external_ip() {
    EXTERNAL_IP=$(curl -s ifconfig.me)
    if [ -z "$EXTERNAL_IP" ]; then
        echo -e "\e[31m‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP –∞–¥—Ä–µ—Å.\e[0m"
        exit 1
    fi
    WEBHOOK_URL="http://${EXTERNAL_IP}:3032"
}

create_env_file() {
    get_external_ip
    echo -e "\e[34müìÇ –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –æ–∫—Ä—É–∂–µ–Ω–∏—è...\e[0m"
    cd $HOME
    if [ ! -d "chasm" ]; then
        mkdir chasm
    else
        echo -e "\e[33m‚ö†Ô∏è –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è 'chasm' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é.\e[0m"
    fi
    cd chasm
    if [ -f ".env" ]; then
        echo -e "\e[33m‚ö†Ô∏è –§–∞–π–ª '.env' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª.\e[0m"
    fi
    cat <<EOF > .env
PORT=3032
LOGGER_LEVEL=debug

# Chasm
ORCHESTRATOR_URL=https://orchestrator.chasm.net
SCOUT_NAME=$SCOUT_NAME
SCOUT_UID=$SCOUT_UID
WEBHOOK_API_KEY=$WEBHOOK_API_KEY
WEBHOOK_URL=$WEBHOOK_URL

# Chosen Provider (groq, openai)
PROVIDERS=groq
MODEL=gemma2-9b-it
GROQ_API_KEY=$GROQ_API_KEY

NODE_ENV=production
EOF
}

configure_firewall() {
    echo -e "\e[34müî• –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –±—Ä–∞–Ω–¥–º–∞—É—ç—Ä...\e[0m"
    sudo ufw allow 3032
}

run_docker_container() {
    echo -e "\e[34müöÄ –ó–∞–ø—É—Å–∫–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä...\e[0m"
    docker pull chasmtech/chasm-scout
    docker run -d --restart=always --env-file ./.env -p 3032:3032 --name scout chasmtech/chasm-scout
}

restart_node() {
    echo -e "\e[34müîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–¥—É...\e[0m"
    docker stop scout
    docker rm scout
    docker run -d --restart=always --env-file ./.env -p 3032:3032 --name scout chasmtech/chasm-scout
}

main() {
    case $1 in
        install)
            install_dependencies
            install_docker
            install_ngrok
            configure_ngrok
            prompt_user_input
            create_env_file
            configure_firewall
            run_docker_container
            echo -e "\e[32m‚úÖ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\e[0m"
            echo -e "\e[31m‚ö†Ô∏è –ï—Å–ª–∏ UFW –≤–∫–ª—é—á–µ–Ω, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à SSH –ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ—Ä–≤–µ—Ä—É.\e[0m"
            ;;
        uninstall)
            echo -e "\e[34müóëÔ∏è –£–¥–∞–ª—è–µ–º –Ω–æ–¥—É...\e[0m"
            docker stop scout
            docker rm scout
            sudo ufw delete allow 3032
            rm rf /root/chasm
            echo -e "\e[32m‚úÖ –ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!\e[0m"
            ;;
        restart)
            restart_node
            echo -e "\e[32m‚úÖ –ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞!\e[0m"
            ;;
        *)
            echo -e "\e[31m‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'install' –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏, 'uninstall' –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–ª–∏ 'restart' –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞.\e[0m"
            exit 1
            ;;
    esac
}

main "$@"