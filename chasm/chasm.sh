#!/bin/bash

CONFIG_FILE="$HOME/chasm/scouts.ini"
LOG_FILE="install_log_$(date +%F).log"
SPINNER="/-\|"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∫–∞—É—Ç–∞
restart_selected_scout() {
    echo -e "\e[36m–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–∫–∞—É—Ç—ã:\e[0m"
    scouts=($(grep -oP '(?<=\[)[^]]+' "$CONFIG_FILE"))
    
    for i in "${!scouts[@]}"; do
        echo "$((i + 1))) ${scouts[$i]}"
    done

    read -p $'\e[33m–í—ã–±–µ—Ä–∏—Ç–µ —Å–∫–∞—É—Ç–∞ –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ (–≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä): \e[0m' SCOUT_CHOICE

    if [[ "$SCOUT_CHOICE" -ge 1 && "$SCOUT_CHOICE" -le "${#scouts[@]}" ]]; then
        selected_scout="${scouts[$((SCOUT_CHOICE - 1))]}"
        config=$(get_scout_config "$selected_scout")
        SCOUT_PORT=$(echo "$config" | grep "port" | cut -d'=' -f2 | xargs)

        log "\e[36m–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∫–∞—É—Ç–∞ '$selected_scout'...\e[0m"
        restart_scout "$selected_scout" "$SCOUT_PORT"
    else
        echo -e "\e[31m–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í—ã—Ö–æ–¥...\e[0m"
        exit 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ –Ω–æ–≤–æ–≥–æ —Å–∫–∞—É—Ç–∞
generate_scout_name() {
    base_name="shadow_scout"
    count=$(grep -oP '\[shadow_scout_\d+\]' "$CONFIG_FILE" | wc -l)
    SCOUT_NAME="${base_name}_$((count + 1))"
    echo "$SCOUT_NAME"
}

update_env_file_with_port() {
    scout_name=$1
    current_port=$2
    env_file="$HOME/chasm/.env_$scout_name"

    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø–æ—Ä—Ç –≤ .env —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –ø–æ—Ä—Ç–æ–º –≤ –∫–æ–Ω—Ñ–∏–≥–µ
    if grep -q "PORT=" "$env_file"; then
        sed -i "s/^PORT=.*/PORT=$current_port/" "$env_file"
    else
        echo "PORT=$current_port" >> "$env_file"
    fi

    # –û–±–Ω–æ–≤–ª—è–µ–º WEBHOOK_URL —Å –Ω–æ–≤—ã–º –ø–æ—Ä—Ç–æ–º
    if grep -q "WEBHOOK_URL=" "$env_file"; then
        sed -i "s|^WEBHOOK_URL=.*|WEBHOOK_URL=http://${EXTERNAL_IP}:${current_port}|" "$env_file"
    else
        echo "WEBHOOK_URL=http://${EXTERNAL_IP}:${current_port}" >> "$env_file"
    fi
}

restart_all_scouts() {
    get_external_ip  # –ü–æ–ª—É—á–∞–µ–º –≤–Ω–µ—à–Ω–∏–π IP –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º

    if [ -f "$CONFIG_FILE" ]; then
        while IFS= read -r scout_name; do
            config=$(get_scout_config "$scout_name")
            SCOUT_PORT=$(echo "$config" | grep "port" | cut -d'=' -f2 | xargs)
            SCOUT_STATUS=$(echo "$config" | grep "status" | cut -d'=' -f2 | xargs)

            if [ "$SCOUT_STATUS" == "active" ]; then
                # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
                if [ "$(docker ps -a --filter "name=scout_$scout_name" --format '{{.Names}}')" ]; then
                    log "\e[33m‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 'scout_$scout_name' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –£–¥–∞–ª—è–µ–º...\e[0m"
                    docker rm -f scout_$scout_name
                fi

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—Ç –≤ .env —Ñ–∞–π–ª–µ –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                update_env_file_with_port "$scout_name" "$SCOUT_PORT"

                # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
                log "\e[36müîÑ –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–∫–∞—É—Ç–∞ '$scout_name'...\e[0m"
                docker run -d --restart=always --env-file $HOME/chasm/.env_$scout_name -p $SCOUT_PORT:$SCOUT_PORT --name scout_$scout_name chasmtech/chasm-scout
                if [ $? -eq 0 ]; then
                    echo -e "\e[32m‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω —Å–∫–∞—É—Ç '$scout_name' –Ω–∞ –ø–æ—Ä—Ç—É $SCOUT_PORT\e[0m"
                    update_scout_status "$scout_name" "active"
                else
                    echo -e "\e[31m‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å —Å–∫–∞—É—Ç–∞ '$scout_name'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Docker –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\e[0m"
                fi
            else
                echo -e "\e[33m–°–∫–∞—É—Ç '$scout_name' –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π.\e[0m"
            fi
        done < <(grep -oP '(?<=\[)[^]]+' "$CONFIG_FILE")
    else
        log "\e[33m‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ $CONFIG_FILE –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–∫–∞—É—Ç–∞.\e[0m"
    fi
}

add_scout_to_config() {
    cat <<EOF >> "$CONFIG_FILE"

[$SCOUT_NAME]
name = $SCOUT_NAME
port = $SCOUT_PORT
status = active
EOF
}

restart_scout() {
    scout_name=$1
    config=$(awk -v scout="$scout_name" 'BEGIN{FS=" = "} $0 ~ "\\["scout"\\]" {in_scout=1} in_scout && $1 == "port" {print $2; exit}' "$CONFIG_FILE")
    scout_port=$(echo "$config" | xargs)  # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    env_file="$HOME/chasm/.env_$scout_name"

    # –õ–æ–≥–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    log "\e[36mDEBUG: –ò–º—è —Å–∫–∞—É—Ç–∞: $scout_name\e[0m"
    log "\e[36mDEBUG: –ü–æ—Ä—Ç —Å–∫–∞—É—Ç–∞: $scout_port\e[0m"
    log "\e[36mDEBUG: Env —Ñ–∞–π–ª: $env_file\e[0m"

    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
    if [ "$(docker ps -a --filter "name=scout_$scout_name" --format '{{.Names}}')" ]; then
        log "\e[33m‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä 'scout_$scout_name' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è...\e[0m"
        docker rm -f scout_$scout_name
    fi

    log "\e[36müîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–∫–∞—É—Ç–∞ '$scout_name'...\e[0m"

    # –ó–∞–ø—É—Å–∫–∞–µ–º Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ—Ä—Ç–∞
    docker run -d --restart=always --env-file "$env_file" -p "$scout_port:$scout_port" --name "scout_$scout_name" chasmtech/chasm-scout

    if [ $? -eq 0 ]; then
        echo -e "\e[32m‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω —Å–∫–∞—É—Ç '$scout_name' –Ω–∞ –ø–æ—Ä—Ç—É $scout_port\e[0m"
        update_scout_status "$scout_name" "active"
    else
        echo -e "\e[31m‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞—É—Ç–∞ '$scout_name'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Docker –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\e[0m"
    fi
}

get_scout_config() {
    scout_name=$1
    section=$(awk -F' = ' -v scout="$scout_name" '
    $0 ~ "\\["scout"\\]" {found=1; next}
    found && $1 == "port" {port=$2}
    found && $1 == "status" {status=$2}
    found && $0 ~ /^\[/ {found=0}
    END {print "port = " port "\nstatus = " status}
    ' "$CONFIG_FILE")
    echo "$section"
}

update_scout_status() {
    scout_name=$1
    new_status=$2
    sed -i "/^\[$scout_name\]$/,/^status =/ s/^status =.*/status = $new_status/" "$CONFIG_FILE"
}

setup_chasm_directory() {
    if [ ! -d "$HOME/chasm" ]; then
        log "\e[36müìÇ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ chasm –≤ $HOME/chasm...\e[0m"
        mkdir -p $HOME/chasm
    fi
}

get_used_ports() {
    docker ps --format '{{.Names}} {{.Ports}}' | grep scout_ | awk '{print $2}' | cut -d':' -f2 | cut -d'-' -f1
}

migrate_old_scout() {
    OLD_SCOUT_NAME="scout"
    OLD_SCOUT_PORT="3032"

    if [ "$(docker inspect -f '{{.State.Running}}' $OLD_SCOUT_NAME 2>/dev/null)" == "true" ]; then
        log "\e[33m‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—é—â–∏–π —Å—Ç–∞—Ä—ã–π —Å–∫–∞—É—Ç –Ω–∞ –ø–æ—Ä—Ç—É $OLD_SCOUT_PORT —Å –∏–º–µ–Ω–µ–º $OLD_SCOUT_NAME.\e[0m"
        read -p $'\e[33müõ†Ô∏è –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ —ç—Ç–æ–≥–æ —Å–∫–∞—É—Ç–∞ –Ω–∞ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É? (y/n): \e[0m' MIGRATE_CHOICE
        if [ "$MIGRATE_CHOICE" == "y" ]; then
            NEW_SCOUT_NAME="scout_legacy"
            docker stop $OLD_SCOUT_NAME
            docker rm $OLD_SCOUT_NAME

            log "\e[36müîÑ –ü–µ—Ä–µ–Ω–æ—Å —Å—Ç–∞—Ä–æ–≥–æ —Å–∫–∞—É—Ç–∞ –≤ –Ω–æ–≤—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...\e[0m"

            SCOUT_PORT=$(get_next_available_port)
            ENV_FILE="$HOME/chasm/.env_$NEW_SCOUT_NAME"

            cat <<EOF > $ENV_FILE
PORT=$SCOUT_PORT
LOGGER_LEVEL=debug

# Chasm
ORCHESTRATOR_URL=https://orchestrator.chasm.net
SCOUT_NAME=$NEW_SCOUT_NAME
SCOUT_UID=$(grep "SCOUT_UID=" "$HOME/chasm/.env" | cut -d'=' -f2)
WEBHOOK_API_KEY=$(grep "WEBHOOK_API_KEY=" "$HOME/chasm/.env" | cut -d'=' -f2)
WEBHOOK_URL=http://${EXTERNAL_IP}:${SCOUT_PORT}

# Chosen Provider (groq, openai)
PROVIDERS=groq
MODEL=gemma2-9b-it
GROQ_API_KEY=$(grep "GROQ_API_KEY=" "$HOME/chasm/.env" | cut -d'=' -f2)

NODE_ENV=production
EOF

            log "\e[36müöÄ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∫–∞—É—Ç–∞ —Å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π...\e[0m"
            docker run -d --restart=always --env-file $ENV_FILE -p $SCOUT_PORT:$SCOUT_PORT --name $NEW_SCOUT_NAME chasmtech/chasm-scout
            update_scout_status "$NEW_SCOUT_NAME" "active"
            log "\e[32m‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–∫–∞—É—Ç —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ–¥ –∏–º–µ–Ω–µ–º $NEW_SCOUT_NAME –Ω–∞ –ø–æ—Ä—Ç—É $SCOUT_PORT.\e[0m"
        fi
    else
        log "\e[32müí° –°—Ç–∞—Ä—ã–π —Å–∫–∞—É—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–µ.\e[0m"
    fi
}

get_next_available_port() {
    USED_PORTS=$(get_used_ports)
    CONFIG_PORTS=$(grep -oP 'port = \K\d+' "$CONFIG_FILE")
    ALL_PORTS=$(echo -e "$USED_PORTS\n$CONFIG_PORTS" | sort -n | uniq)

    PORT=3032
    while echo "$ALL_PORTS" | grep -q "^$PORT$"; do
        PORT=$((PORT+1))
    done
    echo $PORT
}

check_existing_scouts() {
    if [ -f "$CONFIG_FILE" ]; then
        while IFS= read -r scout_name; do
            config=$(get_scout_config "$scout_name")
            SCOUT_PORT=$(echo "$config" | grep "port" | cut -d'=' -f2 | xargs)
            SCOUT_STATUS=$(echo "$config" | grep "status" | cut -d'=' -f2 | xargs)

            if [ "$SCOUT_STATUS" == "active" ]; then
                if [ "$(docker ps --filter "name=scout_$scout_name" --format '{{.Names}}')" ]; then
                    echo -e "\e[32müí° –°–∫–∞—É—Ç '$scout_name' —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É $SCOUT_PORT\e[0m"
                else
                    restart_scout "$scout_name" "$SCOUT_PORT"
                fi
            else
                echo -e "\e[33m–°–∫–∞—É—Ç '$scout_name' –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π.\e[0m"
            fi
        done < <(grep -oP '(?<=\[)[^]]+' "$CONFIG_FILE")
    else
        log "\e[33m‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ $CONFIG_FILE –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∫–∞—É—Ç–æ–≤.\e[0m"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏–Ω–Ω–µ—Ä–∞ –≤–æ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
spin() {
    i=0
    while kill -0 $1 2>/dev/null; do
        i=$(( (i+1) %4 ))
        printf "\r\e[36m%s\e[0m" "${SPINNER:$i:1}"
        sleep 0.1
    done
    echo -ne "\r"
}

# –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "$1" | tee -a $LOG_FILE
}

check_system_health() {
    log "\e[36müîç –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...\e[0m"
    FREE_SPACE=$(df -h / | grep -vE '^Filesystem' | awk '{print $4}')
    CPU_LOAD=$(uptime | awk '{print $10}')
    log "\e[36m–°–≤–æ–±–æ–¥–Ω–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ: $FREE_SPACE\e[0m"
    log "\e[36m–¢–µ–∫—É—â–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ CPU: $CPU_LOAD\e[0m"
    if [ "$(echo $FREE_SPACE | sed 's/G//' | cut -d. -f1)" -lt 5 ]; then
        log "\e[31m‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Å –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç—å—é.\e[0m"
    fi
}

check_docker_installed() {
    if command -v docker &> /dev/null; then
        log "\e[32müê≥ Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –ü—Ä–æ–ø—É—Å–∫ —É—Å—Ç–∞–Ω–æ–≤–∫–∏...\e[0m"
        DOCKER_INSTALLED=true
    else
        log "\e[36müê≥ Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–∏–Ω–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–∫—É...\e[0m"
        DOCKER_INSTALLED=false
    fi
}

check_dependencies_installed() {
    log "\e[36müîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...\e[0m"
    PACKAGES="ca-certificates curl ufw"
    for package in $PACKAGES; do
        if dpkg -l | grep -qw $package; then
            log "\e[32m‚úÖ $package —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!\e[0m"
        else
            log "\e[36müîß $package –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ–π—á–∞—Å...\e[0m"
            sudo apt-get install -y $package
        fi
    done
}

install_dependencies() {
    log "\e[36müîß –®–∞–≥ 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...\e[0m"
    sudo apt-get update && sudo apt-get upgrade -y &
    spin $!
    check_dependencies_installed
}

install_docker() {
    if [ "$DOCKER_INSTALLED" = false ]; then
        sudo install -m 0755 -d /etc/apt/keyrings
        for pkg in docker.io docker-doc docker-compose docker-compose-v2 podman-docker containerd runc; do sudo apt-get remove $pkg; done
        sudo apt-get update
        sudo apt-get install ca-certificates curl
        sudo install -m 0755 -d /etc/apt/keyrings
        sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
        sudo chmod a+r /etc/apt/keyrings/docker.asc

        echo \
        "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \
        $(. /etc/os-release && echo \"$VERSION_CODENAME\") stable" | \
        sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

        sudo apt-get update
        sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin screen &
        spin $!
    fi
    sudo systemctl restart docker
}

prompt_user_input() {
    echo -e "\e[36müìù –®–∞–≥ 3: –í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ...\e[0m"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è GROQ_API_KEY –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º —Ñ–∞–π–ª–µ .env
    if [ -f "$HOME/chasm/.env" ] && grep -q "GROQ_API_KEY=" "$HOME/chasm/.env"; then
        GROQ_API_KEY=$(grep "GROQ_API_KEY=" "$HOME/chasm/.env" | cut -d'=' -f2)
        echo -e "\e[32müîë –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π GROQ_API_KEY –≤ .env: $GROQ_API_KEY\e[0m"
    elif [ -f "$HOME/chasm/GROQ_API_KEY.env" ]; then
        source "$HOME/chasm/GROQ_API_KEY.env"
                echo -e "\e[32müîë –ù–∞–π–¥–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π GROQ_API_KEY –≤ GROQ_API_KEY.env: $GROQ_API_KEY\e[0m"
    else
        read -p $'\e[33müõ†Ô∏è –í–≤–µ–¥–∏—Ç–µ GROQ_API_KEY: \e[0m' GROQ_API_KEY
        mkdir -p $HOME/chasm
        echo "GROQ_API_KEY=$GROQ_API_KEY" > $HOME/chasm/GROQ_API_KEY.env
    fi

    SCOUT_NAME=$(generate_scout_name)  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Å–∫–∞—É—Ç–∞
    read -p $'\e[33müîê –í–≤–µ–¥–∏—Ç–µ SCOUT_UID: \e[0m' SCOUT_UID
    read -p $'\e[33müîë –í–≤–µ–¥–∏—Ç–µ WEBHOOK_API_KEY: \e[0m' WEBHOOK_API_KEY
}

get_external_ip() {
    EXTERNAL_IP=$(curl -s https://api.ipify.org)
    if [ -z "$EXTERNAL_IP" ]; then
        log "\e[31müí• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à –≤–Ω–µ—à–Ω–∏–π IP. –û—Å—Ç–∞–Ω–æ–≤–∫–∞...\e[0m"
        exit 1
    fi
}

create_env_file() {
    get_external_ip
    log "\e[36müìÇ –®–∞–≥ 4: –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è $SCOUT_NAME...\e[0m"

    cd $HOME/chasm

    SCOUT_PORT=$(get_next_available_port)
    ENV_FILE=".env_$SCOUT_NAME"

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞ –¥–ª—è WEBHOOK_URL –Ω–∞ –æ—Å–Ω–æ–≤–µ SCOUT_PORT
    WEBHOOK_URL="http://${EXTERNAL_IP}:${SCOUT_PORT}"

    cat <<EOF > $ENV_FILE
PORT=$SCOUT_PORT
LOGGER_LEVEL=debug

# Chasm
ORCHESTRATOR_URL=https://orchestrator.chasm.net
SCOUT_NAME=$SCOUT_NAME
SCOUT_UID=$SCOUT_UID
WEBHOOK_API_KEY=$WEBHOOK_API_KEY
WEBHOOK_URL=$WEBHOOK_URL

# Chosen Provider (groq, openai)
PROVIDERS=groq
MODEL=gemma2-9b-it
GROQ_API_KEY=$GROQ_API_KEY

NODE_ENV=production
EOF

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    cat <<EOF >> $CONFIG_FILE
[$SCOUT_NAME]
name = $SCOUT_NAME
port = $SCOUT_PORT
status = active
EOF
}

configure_firewall() {
    log "\e[36müî• –®–∞–≥ 5: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–µ—Ä–≤–æ–ª–∞...\e[0m"
    sudo ufw allow $SCOUT_PORT
}

run_docker_container() {
    log "\e[36müöÄ –ó–∞–ø—É—Å–∫ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è $SCOUT_NAME... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ!\e[0m"
    sleep 5 

    docker pull chasmtech/chasm-scout
    docker run -d --restart=always --env-file $HOME/chasm/.env_$SCOUT_NAME -p $SCOUT_PORT:$SCOUT_PORT --name scout_$SCOUT_NAME chasmtech/chasm-scout
    if [ $? -eq 0 ]; then
        echo -e "\e[32m‚úÖ –°–∫–∞—É—Ç '$SCOUT_NAME' —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É $SCOUT_PORT\e[0m"
    else
        echo -e "\e[31m‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞—É—Ç–∞ '$SCOUT_NAME'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Docker –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\e[0m"
    fi
}

restart_node() {
    log "\e[36müîÑ –®–∞–≥ 7: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤–∞—à–µ–≥–æ —É–∑–ª–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏...\e[0m"
    docker stop scout
    docker rm scout
    docker run -d --restart=always --env-file ./.env -p 3032:3032 --name scout chasmtech/chasm-scout
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–∫–∞—É—Ç–æ–≤
update_all_scouts() {
    log "\e[36müîÑ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Å–∫–∞—É—Ç–æ–≤...\e[0m"

    if [ -f "$CONFIG_FILE" ]; then
        while IFS= read -r scout_name; do
            config=$(get_scout_config "$scout_name")
            SCOUT_PORT=$(echo "$config" | grep "port" | cut -d'=' -f2 | xargs)

            log "\e[33m‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ 'scout_$scout_name'...\e[0m"
            docker stop scout_$scout_name

            log "\e[33müóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ 'scout_$scout_name'...\e[0m"
            docker rm scout_$scout_name

            log "\e[36müöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è '$scout_name' –Ω–∞ –ø–æ—Ä—Ç—É $SCOUT_PORT...\e[0m"
            docker run -d --restart=always --env-file "$HOME/chasm/.env_$scout_name" -p "$SCOUT_PORT:$SCOUT_PORT" --name scout_$scout_name chasmtech/chasm-scout

            if [ $? -eq 0 ]; then
                echo -e "\e[32m‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω –∏ –∑–∞–ø—É—â–µ–Ω —Å–∫–∞—É—Ç '$scout_name' –Ω–∞ –ø–æ—Ä—Ç—É $SCOUT_PORT\e[0m"
                update_scout_status "$scout_name" "active"
            else
                echo -e "\e[31m‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–∫–∞—É—Ç–∞ '$scout_name'. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Docker –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\e[0m"
            fi

        done < <(grep -oP '(?<=\[)[^]]+' "$CONFIG_FILE")
    else
        log "\e[33m‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ $CONFIG_FILE –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü—Ä–æ–ø—É—Å–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–∫–∞—É—Ç–æ–≤.\e[0m"
    fi
}

main() {
    echo -e "\n\e[1;34m‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\e[0m"
    echo -e "\e[1;34m‚ïë            \e[36mChasm Scout Manager\e[1;34m              ‚ïë\e[0m"
    echo -e "\e[1;34m‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\e[0m\n"

    echo -e "\e[36m–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\e[0m"
    echo -e "\e[1;33m1)\e[0m \e[32m–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Å–∫–∞—É—Ç–∞\e[0m"
    echo -e "\e[1;33m2)\e[0m \e[32m–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∫–∞—É—Ç–æ–≤\e[0m"
    echo -e "\e[1;33m3)\e[0m \e[32m–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–∫–∞—É—Ç–∞\e[0m"
    echo -e "\e[1;33m4)\e[0m \e[32m–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–∫–∞—É—Ç–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤\e[0m"
    echo -e "\e[1;33m5)\e[0m \e[32m–û–±–Ω–æ–≤–∏—Ç—å –≤—Å–µ—Ö —Å–∫–∞—É—Ç–æ–≤\e[0m"
    echo -e "\e[1;34m‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\e[0m"
    read -p $'\e[33m–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1, 2, 3, 4 –∏–ª–∏ 5): \e[0m' ACTION_CHOICE

    if [ "$ACTION_CHOICE" == "1" ]; then
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–∫–∞—É—Ç–∞
        check_system_health
        check_docker_installed
        install_dependencies
        install_docker
        setup_chasm_directory  
        migrate_old_scout  
        check_existing_scouts
        prompt_user_input
        create_env_file
        configure_firewall
        run_docker_container
        log "\e[32m‚úÖ –í—Å–µ –≥–æ—Ç–æ–≤–æ! –í–∞—à –Ω–æ–≤—ã–π —É–∑–µ–ª –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!\e[0m"
        log "\e[31m‚ö†Ô∏è –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–∞—à SSH-–ø–æ—Ä—Ç –æ—Ç–∫—Ä—ã—Ç, –µ—Å–ª–∏ UFW –≤–∫–ª—é—á–µ–Ω.\e[0m"
        exit 0
    elif [ "$ACTION_CHOICE" == "2" ]; then
        # –ü–æ–ª–Ω—ã–π —Ä–µ—Å—Ç–∞—Ä—Ç –≤—Å–µ—Ö —Å–∫–∞—É—Ç–æ–≤ (—É–¥–∞–ª–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ)
        setup_chasm_directory
        restart_all_scouts
        log "\e[32m‚úÖ –í—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–∫–∞—É—Ç—ã –±—ã–ª–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω—ã!\e[0m"
        exit 0
    elif [ "$ACTION_CHOICE" == "3" ]; then
        # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–∫–∞—É—Ç–∞
        setup_chasm_directory
        restart_selected_scout
        log "\e[32m‚úÖ –í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–∫–∞—É—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!\e[0m"
        exit 0
    elif [ "$ACTION_CHOICE" == "4" ]; then
        # –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–∫–∞—É—Ç–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
        list_running_scouts
        exit 0
    elif [ "$ACTION_CHOICE" == "5" ]; then
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–∫–∞—É—Ç–æ–≤
        setup_chasm_directory
        update_all_scouts
        log "\e[32m‚úÖ –í—Å–µ —Å–∫–∞—É—Ç—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\e[0m"
        exit 0
    else
        echo -e "\e[31m–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í—ã—Ö–æ–¥...\e[0m"
        exit 1
    fi
}

list_running_scouts() {
    echo -e "\n\e[1;34m‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó\e[0m"
    echo -e "\e[1;34m‚ïë          \e[36m–°–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–∞—é—â–∏—Ö —Å–∫–∞—É—Ç–æ–≤\e[1;34m          ‚ïë\e[0m"
    echo -e "\e[1;34m‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\e[0m\n"

    if [ -f "$CONFIG_FILE" ]; then
        while IFS= read -r scout_name; do
            config=$(get_scout_config "$scout_name")
            SCOUT_PORT=$(echo "$config" | grep -oP '(?<=port = ).*')
            SCOUT_STATUS=$(echo "$config" | grep -oP '(?<=status = ).*')

            if [ "$(docker ps --filter "name=scout_$scout_name" --format '{{.Names}}')" ]; then
                echo -e "\e[32müí° –°–∫–∞—É—Ç '$scout_name' —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É $SCOUT_PORT\e[0m"

                if [ "$SCOUT_STATUS" != "active" ]; then
                    echo -e "\e[33m‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –°–∫–∞—É—Ç '$scout_name' –Ω–µ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω—ã–π –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏!\e[0m"
                fi
            else
                echo -e "\e[31m‚ùå –°–∫–∞—É—Ç '$scout_name' –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É $SCOUT_PORT\e[0m"
            fi
        done < <(grep -oP '(?<=\[)[^]]+' "$CONFIG_FILE")
    else
        log "\e[33m‚ö†Ô∏è –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ $CONFIG_FILE –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–∞—É—Ç–æ–≤.\e[0m"
    fi
}

main