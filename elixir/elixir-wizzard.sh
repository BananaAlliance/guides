#!/bin/bash

# –¶–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
COLOR_RESET="\e[0m"
COLOR_GREEN="\e[32m"
COLOR_YELLOW="\e[33m"
COLOR_RED="\e[31m"
COLOR_BLUE="\e[34m"

SCRIPT_VERSION="1.0.1"



# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
log() {
    echo -e "$1"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
handle_error() {
    log "${COLOR_RED}‚ùå $1${COLOR_RESET}"
    exit 1
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–∞
check_and_install_package() {
    if ! dpkg -l | grep -qw "$1"; then
        log "${COLOR_YELLOW}üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º $1...${COLOR_RESET}"
        sudo apt-get install -y "$1" || handle_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å $1."
    else
        log "${COLOR_GREEN}‚úîÔ∏è  $1 —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!${COLOR_RESET}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Docker
check_and_install_docker() {
    if ! command -v docker &> /dev/null; then
        log "${COLOR_YELLOW}üê≥ Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker...${COLOR_RESET}"
        sudo install -m 0755 -d /etc/apt/keyrings || handle_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é /etc/apt/keyrings."
        wget -O- https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor | sudo tee /etc/apt/keyrings/docker.gpg > /dev/null || handle_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª—é—á Docker GPG."
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null || handle_error "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π Docker."
        sudo apt-get update -y || handle_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤."
        check_and_install_package "docker-ce"
    else
        log "${COLOR_GREEN}‚úîÔ∏è  Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!${COLOR_RESET}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–æ–¥—ã
update_node() {
    ENV_DIR="$HOME/.elixir"
    ENV_FILE="$ENV_DIR/.env"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–æ–¥—ã
    if ! docker ps -a --format '{{.Names}}' | grep -qw "elixir"; then
        log "${COLOR_RED}‚ùå –ù–æ–¥–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –Ω–æ–¥—ã.${COLOR_RESET}"
        exit 1
    fi

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ .env
    if [ ! -f "$ENV_FILE" ]; then
        log "${COLOR_YELLOW}‚ö†Ô∏è –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π .env —Ñ–∞–π–ª...${COLOR_RESET}"
        prompt_user_input
        create_env_file
    fi

    log "${COLOR_BLUE}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–∫—É—â–µ–π –Ω–æ–¥—ã...${COLOR_RESET}"
    docker stop elixir || handle_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É Elixir."

    log "${COLOR_RED}üóë –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞...${COLOR_RESET}"
    docker rm elixir || handle_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Elixir."

    log "${COLOR_BLUE}üì• –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ Docker-–æ–±—Ä–∞–∑–∞...${COLOR_RESET}"
    docker pull elixirprotocol/validator:v3 || handle_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–π Docker-–æ–±—Ä–∞–∑."

    log "${COLOR_BLUE}üöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ –Ω–æ–¥—ã...${COLOR_RESET}"
    docker run -d \
        --env-file "$ENV_FILE" \
        --name elixir \
        --restart unless-stopped \
        elixirprotocol/validator:v3 || handle_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –Ω–æ–¥—ã Elixir."

    log "${COLOR_GREEN}‚úîÔ∏è –ù–æ–¥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∏ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞!${COLOR_RESET}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
prompt_user_input() {
    read -p $'\e[34m–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–¥—ã: \e[0m' NODE_NAME
    read -p $'\e[34m–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å Metamask: \e[0m' METAMASK_ADDRESS
    read -p $'\e[34m–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: \e[0m' PRIVATE_KEY
    # –£–¥–∞–ª—è–µ–º 0x –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    PRIVATE_KEY=$(echo "$PRIVATE_KEY" | sed 's/^0x//')
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–Ω–µ—à–Ω–µ–≥–æ IP-–∞–¥—Ä–µ—Å–∞
get_external_ip() {
    log "${COLOR_BLUE}üåê –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–µ–≥–æ IP-–∞–¥—Ä–µ—Å–∞...${COLOR_RESET}"
    EXTERNAL_IP=$(curl -4 -s ifconfig.me)
    if [ -z "$EXTERNAL_IP" ]; then
        handle_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–Ω–µ—à–Ω–∏–π IP-–∞–¥—Ä–µ—Å."
    fi
    log "${COLOR_GREEN}‚úîÔ∏è  –í–Ω–µ—à–Ω–∏–π IP-–∞–¥—Ä–µ—Å: $EXTERNAL_IP${COLOR_RESET}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è .env —Ñ–∞–π–ª–∞
create_env_file() {
    ENV_DIR="$HOME/.elixir"
    ENV_FILE="$ENV_DIR/.env"

    if [ ! -d "$ENV_DIR" ]; then
        log "${COLOR_BLUE}üìÇ –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ $ENV_DIR...${COLOR_RESET}"
        mkdir -p "$ENV_DIR" || handle_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é $ENV_DIR."
    fi

    log "${COLOR_BLUE}üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ .env –≤ $ENV_FILE...${COLOR_RESET}"
    cat <<EOF > "$ENV_FILE"
ENV=testnet-3

STRATEGY_EXECUTOR_DISPLAY_NAME=$NODE_NAME
STRATEGY_EXECUTOR_BENEFICIARY=$METAMASK_ADDRESS
SIGNER_PRIVATE_KEY=$PRIVATE_KEY
STRATEGY_EXECUTOR_IP_ADDRESS=$EXTERNAL_IP
EOF

    if [ -f "$ENV_FILE" ]; then
        log "${COLOR_GREEN}‚úîÔ∏è  –§–∞–π–ª .env —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!${COLOR_RESET}"
    else
        handle_error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª .env."
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–æ–¥—ã
run_elixir_node() {
    log "${COLOR_BLUE}üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ Docker-–æ–±—Ä–∞–∑–∞ elixirprotocol/validator:3.1.0...${COLOR_RESET}"
    docker pull elixirprotocol/validator:v3 || handle_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Docker-–æ–±—Ä–∞–∑."

    log "${COLOR_BLUE}üöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–¥—ã Elixir...${COLOR_RESET}"
    docker run -d \
        --env-file "$ENV_FILE" \
        --name elixir \
        --restart unless-stopped \
        elixirprotocol/validator:v3 || handle_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—É Elixir."

    log "${COLOR_GREEN}‚úîÔ∏è  –ù–æ–¥–∞ Elixir —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!${COLOR_RESET}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–¥—ã
remove_elixir_node() {
    log "${COLOR_RED}üõë –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã Elixir...${COLOR_RESET}"
    docker stop elixir || handle_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Elixir."
    docker rm elixir || handle_error "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Elixir."
    log "${COLOR_GREEN}‚úîÔ∏è  –ù–æ–¥–∞ Elixir —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!${COLOR_RESET}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–¥–æ–π
manage_node_menu() {
    log "${COLOR_BLUE}üìã –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–¥–æ–π Elixir:${COLOR_RESET}"

    if [ "$(docker ps --filter "name=elixir" --filter "status=running" --format '{{.Names}}')" ]; then
        log "  1) –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É"
    else
        log "  1) –ó–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—É"
    fi

    log "  2) –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—É"
    log "  3) –í—ã–π—Ç–∏"
    log "  4) –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É"

    read -p $'\e[34m–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: \e[0m' ACTION

    case "$ACTION" in
        1)
            if [ "$(docker ps --filter "name=elixir" --filter "status=running" --format '{{.Names}}')" ]; then
                stop_node
            else
                start_node
            fi
            ;;
        2)
            restart_node
            ;;
        3)
            log "${COLOR_GREEN}–í—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.${COLOR_RESET}"
            ;;
        4)
            update_node
            ;;
        *)
            log "${COLOR_RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.${COLOR_RESET}"
            manage_node_menu
            ;;
    esac
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–¥—ã
start_node() {
    if [ "$(docker ps --filter "name=elixir" --format '{{.Names}}')" ]; then
        log "${COLOR_YELLOW}‚ö†Ô∏è –ù–æ–¥–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞.${COLOR_RESET}"
    else
        log "${COLOR_BLUE}üöÄ –ó–∞–ø—É—Å–∫ –Ω–æ–¥—ã Elixir...${COLOR_RESET}"
        docker run -d \
            --env-file "$ENV_FILE" \
            --name elixir \
            --restart unless-stopped \
            elixirprotocol/validator:v3 || handle_error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—É Elixir."
        log "${COLOR_GREEN}‚úîÔ∏è –ù–æ–¥–∞ Elixir —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!${COLOR_RESET}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–¥—ã
stop_node() {
    if [ "$(docker ps --filter "name=elixir" --filter "status=running" --format '{{.Names}}')" ]; then
        log "${COLOR_BLUE}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã Elixir...${COLOR_RESET}"
        docker stop elixir || handle_error "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–¥—É Elixir."
        log "${COLOR_GREEN}‚úîÔ∏è –ù–æ–¥–∞ Elixir —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!${COLOR_RESET}"
    else
        log "${COLOR_YELLOW}‚ö†Ô∏è –ù–æ–¥–∞ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.${COLOR_RESET}"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –Ω–æ–¥—ã
restart_node() {
    log "${COLOR_BLUE}üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –Ω–æ–¥—ã Elixir...${COLOR_RESET}"
    docker restart elixir || handle_error "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–¥—É Elixir."
    log "${COLOR_GREEN}‚úîÔ∏è –ù–æ–¥–∞ Elixir —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–∞!${COLOR_RESET}"
}

# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–æ–≥–æ–≤
display_log_instructions() {
    log "${COLOR_BLUE}üìú –ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –Ω–æ–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É:${COLOR_RESET}"
    log "${COLOR_YELLOW}docker logs -f elixir${COLOR_RESET}"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
view_config_file() {
    if [ -f "$HOME/.elixir/.env" ]; then
        log "${COLOR_BLUE}üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:${COLOR_RESET}"
        cat "$HOME/.elixir/.env"
    else
        handle_error "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω."
    fi
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–º–æ—â–∏
display_help() {
    log "${COLOR_BLUE}–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:${COLOR_RESET}"
    log "  $0 install       - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã Elixir"
    log "  $0 remove        - –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–¥—ã Elixir"
    log "  $0 logs          - –ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤ –Ω–æ–¥—ã"
    log "  $0 view-config   - –ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
        log "  $0 manage        - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–¥–æ–π (—Å—Ç–∞—Ä—Ç, —Å—Ç–æ–ø, —Ä–µ—Å—Ç–∞—Ä—Ç)"
    log "  $0 help          - –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç—Ç–æ–π —Å–ø—Ä–∞–≤–∫–∏"
}

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏
install_node() {
    log "${COLOR_BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${COLOR_RESET}"
    log "${COLOR_BLUE}‚ïë       üöÄ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–¥—ã Elixir 3 —Ñ–∞–∑–∞       ‚ïë${COLOR_RESET}"
    log "${COLOR_BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${COLOR_RESET}\n"

    prompt_user_input
    get_external_ip
    create_env_file
    check_and_install_docker
    run_elixir_node

    log "${COLOR_GREEN}üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à–∞ –Ω–æ–¥–∞ Elixir —Ä–∞–±–æ—Ç–∞–µ—Ç.${COLOR_RESET}"
    display_log_instructions
}

# –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç
case "$1" in
    install)
        install_node
        ;;
    remove)
        remove_elixir_node
        ;;
    logs)
        display_log_instructions
        ;;
    view-config)
        view_config_file
        ;;
    manage)
        manage_node_menu
        ;;
    help)
        display_help
        ;;
    *)
        log "${COLOR_RED}–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç: $1${COLOR_RESET}"
        display_help
        exit 1
        ;;
esac
